<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0-1背包</title>
    <url>/2021/11/16/0-1%E8%83%8C%E5%8C%85/</url>
    <content><![CDATA[<h3 id="动态规划背包问题"><a href="#动态规划背包问题" class="headerlink" title="动态规划背包问题"></a>动态规划背包问题</h3><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><ul>
<li>常见于题型：考虑每个物品选或者不选；</li>
<li>dp[i] [j] 一般定义成：前i个物品中，容量为j，怎么样；</li>
</ul>
<h4 id="LC416-分割等和子集"><a href="#LC416-分割等和子集" class="headerlink" title="LC416.分割等和子集"></a>LC416.分割等和子集</h4><p><img src="/images/blogImg/lc416.png" alt="题目描述"></p>
<ul>
<li>看数据范围可知，dfs必定超时；</li>
<li>一般dfs搜索可以解决的问题，动态规划也能解决； (个人认为动态规划的本质也是搜索，基本等价于记忆化dfs)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-comment">// 动态规划：0-1背包，从前i个物品里是否能挑出刚好容量为sum/2</span><br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; x : nums) sum += x;<br>        <span class="hljs-keyword">if</span>(sum % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        vector&lt;vector&lt;<span class="hljs-keyword">bool</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n, vector&lt;<span class="hljs-keyword">bool</span>&gt;(sum/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>));<br>        <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] == sum / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] &lt; sum / <span class="hljs-number">2</span>) dp[<span class="hljs-number">0</span>][nums[<span class="hljs-number">0</span>]] = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;				<span class="hljs-comment">// 复杂度：O(NM) M为sum/2</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= sum / <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span>(nums[i] == j) &#123;<br>                    dp[i][j] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(dp[i<span class="hljs-number">-1</span>][j]) dp[i][j] = <span class="hljs-literal">true</span>;		<span class="hljs-comment">// 更新dp[i][j]</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j-nums[i]&gt;=<span class="hljs-number">0</span> &amp;&amp; dp[i<span class="hljs-number">-1</span>][j-nums[i]]) dp[i][j] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 更新dp[i][j]</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(dp[i][sum/<span class="hljs-number">2</span>]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n<span class="hljs-number">-1</span>][sum/<span class="hljs-number">2</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<ul>
<li><p>优化：</p>
<ul>
<li>从上面可以看出，dp[i] [j]仅于dp[i-1] [j]和dp[i-1] [j-nums[i]]有关，因此只要保存上一行即可；</li>
<li>进一步可以从二维优化到一维，逆序更新即可；即用当前行覆盖上一行数据；(看代码就容易明白了)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-comment">// 二维0-1背包优化成1维度; </span><br>        <span class="hljs-comment">// (因为dp[i][j]仅于dp[i-1][j]和dp[i-1][j-nums[i]]有关)</span><br>        <span class="hljs-comment">// (即当前行的更新仅于上一行的两个元素有关) 因此倒序更新即可</span><br>        <br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; x : nums) sum += x;<br>        <span class="hljs-keyword">if</span>(sum % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(sum/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] == sum / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] &lt; sum / <span class="hljs-number">2</span>) dp[nums[<span class="hljs-number">0</span>]] = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = sum/<span class="hljs-number">2</span>; j &gt;= nums[i]; j--) &#123;<br>                dp[j] = dp[j] || dp[j-nums[i]];     <span class="hljs-comment">// 当前行的dp[j], 利用上一行的dp[j]和dp[j-nums[i]]来更新</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(dp[sum/<span class="hljs-number">2</span>]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>0-1背包</tag>
      </tags>
  </entry>
  <entry>
    <title>《Effective C++》第一章</title>
    <url>/2021/11/24/Effective%20C++%20%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><ul>
<li>默认的构造函数：要么没有参数，要么每个参数都有缺省值。</li>
<li>构造函数最好使用explicit关键字，阻止隐式类型转换(使代码更规范，防止意想不到的错误)。</li>
<li>拷贝构造函数的参数只能是传引用(不能是传值，也不能传指针)。<a href="http://hanke8.cloud/2021/11/22/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/">解释</a></li>
</ul>
<h3 id="条款01-视-C-为一个语言联邦"><a href="#条款01-视-C-为一个语言联邦" class="headerlink" title="条款01 视 C++ 为一个语言联邦"></a>条款01 视 C++ 为一个语言联邦</h3><ul>
<li>C++ 是个多重范型编程语言：面向过程、面向对象、函数式、泛型、原编程式，所以他的规约很多，记住四个次语言可以帮助了解 C++：C、Object-Oriented C++、Template C++、STL。</li>
</ul>
<h3 id="条款02-尽量以-const、enum、inline-替换-define"><a href="#条款02-尽量以-const、enum、inline-替换-define" class="headerlink" title="条款02 尽量以 const、enum、inline 替换 #define"></a>条款02 尽量以 const、enum、inline 替换 #define</h3><ul>
<li><p>少用#define的理由如下：</p>
<ul>
<li><strong>#define不会进行类型安全检查</strong>，#define AGE 25，AGE无类型，在进行预处理阶段只有AGE被替换成25的过程；而const int age = 25，age有类型(int)，在编译阶段会进行类型安全检查。</li>
<li><strong>#define不提供封装性</strong>，即不存在private #define 这样的东东，无法用在class内部用#define定义class的专属常量；而class的常量可以用const来声明，比如static const int MAX_SIZE = 1024。</li>
<li><strong>使用#define定义”宏函数”时，会出其不意的错误有时候</strong>，最好改用inline函数替换#define。</li>
</ul>
</li>
<li><p>他们的根本差别是：前三者是编译器处理的，最后者是预处理器处理的。enum 比 const 更像 #define，比如说 const 定义通常可以求地址或引用，而 enum 不行。</p>
</li>
<li><p>inline 函数比宏多了类型安全和可预料性，一个例子是将 i++ 或 ++i 当参数传给宏时，可能导致 ++ 了多次，而传给 inline 函数则不会。</p>
</li>
<li><p>请记住：</p>
<ul>
<li>对于单纯常量，最好使用const对象或者enum替代#define。</li>
<li>对于宏函数，最好使用inline函数替换。</li>
</ul>
</li>
</ul>
<h3 id="条款03-尽可能使用-const"><a href="#条款03-尽可能使用-const" class="headerlink" title="条款03 尽可能使用 const"></a>条款03 尽可能使用 const</h3><ul>
<li>const 可以帮助编译器侦测错误的用法。例如，令函数返回一个常量值，往往可降低因调用者错误而造成的意外，而又不至于放弃<strong>安全性</strong>和高效性。比如当比较语句少写了一个 = 时：</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">// 本意是 ==，结果导致在 a * b 的临时变量上调用 operator=</span><br><span class="hljs-keyword">if</span> <span class="hljs-comment">(a * b = c)</span> ...<br></code></pre></td></tr></table></figure>

<p>​        如果 operator= 返回值不是 const 会导致以上错误代码编译通过！</p>
<h3 id="条款04-确定对象被使用前已被初始化"><a href="#条款04-确定对象被使用前已被初始化" class="headerlink" title="条款04 确定对象被使用前已被初始化"></a>条款04 确定对象被使用前已被初始化</h3><ul>
<li><p><strong>c++规定初始化发生在进入构造函数之前</strong>。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> A&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-built_in">int</span> x;<br>	<span class="hljs-built_in">int</span> y;<br>	<span class="hljs-comment">// 赋值</span><br>    <span class="hljs-constructor">A()</span> &#123;<br>    	x = <span class="hljs-number">0</span>;		<span class="hljs-comment">// 注意！这是赋值不是初始化。（在进入构造函数之前就进行了初始化）</span><br>    	y = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-constructor">A()</span>: x(<span class="hljs-number">0</span>), y(<span class="hljs-number">0</span>) &#123;	<span class="hljs-comment">// 这才是初始化，这样比赋值的效率高（因为赋值前就进行了初始化）</span><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li>
<li><p>c++对于处于不同编译单元的non-local static对象的初始化相对顺序无明确定义。</p>
<ul>
<li>注：local static对象是指在函数内声明定义的static对象，并通过该函数返回该对象的引用。</li>
<li>带来问题：比如两个源文件分别定义了non-local static对象a, b，其中a用到了b，此时b可能还未初始化。</li>
<li>解决方案：为避免跨编译单元的初始化次序问题，用 local static 对象代替 non-local static 对象，参考 Singleton 模式常见实现。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">XClass&amp; <span class="hljs-function"><span class="hljs-title">GetInstance</span>(<span class="hljs-params"></span>)</span><br>&#123;<br>    <span class="hljs-keyword">static</span> XClass instance;<br>    <span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://segmentfault.com/a/1190000038888539">https://segmentfault.com/a/1190000038888539</a></li>
<li>《Effective C++》第一章</li>
</ul>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>《Effective C++》</tag>
      </tags>
  </entry>
  <entry>
    <title>c++引用的本质</title>
    <url>/2021/11/23/c-%E5%BC%95%E7%94%A8%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<h2 id="C-引用的本质"><a href="#C-引用的本质" class="headerlink" title="C++ 引用的本质"></a>C++ 引用的本质</h2><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li><strong>引用的本质是一个指针常量</strong></li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p>一个reference通常是以一个指针来实现的，所以point和reference并没有本质的区别。– &lt;&lt;深度探索C++对象模型&gt;&gt;</p>
<ul>
<li>注：Lippman 这里只是说通常的编译器实现，但是 C++标准并未给予保证。</li>
</ul>
</li>
<li><p>引用的本质是一个指针常量(注意不是常量指针),指针常量的指向不可改而指向的值可以修改； 这也解释了引用为什么能够修改原来变量的值，修改值的唯一方法即是修改该地址对应的值。 – Google</p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>c++引用的本质</tag>
      </tags>
  </entry>
  <entry>
    <title>epolloneshot事件</title>
    <url>/2021/11/19/epolloneshot%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="epoll-ET触发模式-epolloneshot事件"><a href="#epoll-ET触发模式-epolloneshot事件" class="headerlink" title="epoll - ET触发模式 - epolloneshot事件"></a>epoll - ET触发模式 - epolloneshot事件</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>对于同一批数据我们希望在一个线程里面处理，不然容易造成混乱。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>epoll模型的ET模式一般来说只触发一次，然而在并发程序中有特殊情况的存在，譬如当epoll_wait已经检测到socket描述符fd1，并通知应用程序处理fd1的数据，那么处理过程中该fd1又有新的数据可读，会唤醒其他线程对fd1进行操作，那么就出现了两个工作线程同时处理fd1的情况，这当然不是我们期望看到的。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>epolloneshot事件，规定操作系统最多触发其上注册的一个可读或者可写或者异常事件，且只触发一次，如此无论线程再多，只能有一个线程或进程处理同一个描述符。当然处理完之后线程要重置这个epolloneshot事件，进而当此描述符有事件可读时让其他进程可以处理此描述符。</p>
<h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 工作线程</span><br><span class="hljs-keyword">while</span>( <span class="hljs-number">1</span> ) &#123;<br>	<span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">recv</span>( sockfd, buf, BUFFER_SIZE<span class="hljs-number">-1</span>, <span class="hljs-number">0</span> );<br>    <span class="hljs-keyword">if</span>( ret == <span class="hljs-number">0</span> ) &#123;		<span class="hljs-comment">// 客户端关闭连接</span><br>    	<span class="hljs-built_in">close</span>( sockfd );<br>        <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;client closed the connection\n&quot;</span> );<br>        <span class="hljs-keyword">break</span>;<br>	&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( ret &lt; <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-keyword">if</span>( errno == EAGAIN ) &#123;	<span class="hljs-comment">// 数据被读完</span><br>        	<span class="hljs-built_in">resetOneshot</span>( epollfd, sockfd );  <span class="hljs-comment">// 重置Oneshot事件</span><br>            <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;read later\n&quot;</span> );<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> ...略<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://blog.csdn.net/hnlyyk/article/details/50946655">https://blog.csdn.net/hnlyyk/article/details/50946655</a></li>
<li><a href="https://www.cnblogs.com/kex1n/p/7451069.html">https://www.cnblogs.com/kex1n/p/7451069.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux网络编程</category>
      </categories>
      <tags>
        <tag>epolloneshot</tag>
      </tags>
  </entry>
  <entry>
    <title>inline内联函数</title>
    <url>/2021/11/25/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="inline内联函数"><a href="#inline内联函数" class="headerlink" title="inline内联函数"></a>inline内联函数</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul>
<li><p>函数调用需要开栈 (分配内存、保存现场、准备参数、准备返回值)。</p>
</li>
<li><p><strong>(假设某个函数经常被调用)为了解决频繁调用函数对栈内存重复开辟所带来的消耗，引入了inline修饰符，表示为内联函数。</strong></p>
</li>
<li><p>编译器将内联函数内的代码复制到每一个使用它的地方。（有点像宏函数，但宏函数是预处理器来替换，不进行安全性检查）</p>
</li>
</ul>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul>
<li><strong>关键字inline 必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用</strong>。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 错误写法</span><br>inline void <span class="hljs-constructor">Foo(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span>;  <span class="hljs-comment">// inline 仅与函数声明放在一起</span><br>void <span class="hljs-constructor">Foo(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span> &#123;&#125;<br><br><span class="hljs-comment">// 正确写法</span><br>void <span class="hljs-constructor">Foo(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span>;<br>inline void <span class="hljs-constructor">Foo(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span> &#123;&#125; <span class="hljs-comment">// inline 与函数定义体放在一起</span><br></code></pre></td></tr></table></figure>



<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><ul>
<li><p>inline只适合涵数体内代码简单的函数数使用，不能包含复杂的结构控制语句例如while、switch，并且<strong>内联函数本身不能是直接递归函数</strong>。</p>
<ul>
<li>解释：内联函数不能是递归函数，因为内联函数是被编译器在编译的时候展开，而递归的深度在编译的时候无法确定。</li>
</ul>
</li>
<li><p><strong>内联是以代码膨胀（复制）为代价</strong>，仅仅省去了函数调用的开销，从而提高函数的执行效率。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，<strong>每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间</strong>。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><p><a href="https://blog.csdn.net/zqixiao_09/article/details/50877383">https://blog.csdn.net/zqixiao_09/article/details/50877383</a></p>
</li>
<li><p><a href="https://blog.csdn.net/BjarneCpp/article/details/76044493">https://blog.csdn.net/BjarneCpp/article/details/76044493</a></p>
</li>
<li><p><a href="https://bbs.csdn.net/topics/90164538">https://bbs.csdn.net/topics/90164538</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>inline内联函数</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode78.子集-求子集的两个模板</title>
    <url>/2021/05/16/leetcode78-%E5%AD%90%E9%9B%86-%E6%B1%82%E5%AD%90%E9%9B%86%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/images/blogImg/lc78_problem.png" alt="题目描述"></p>
<h2 id="解法1：二进制状态编码"><a href="#解法1：二进制状态编码" class="headerlink" title="解法1：二进制状态编码"></a>解法1：二进制状态编码</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>· 原序列中的每个数字有两种状态：在子集中、不在子集中；<br>· 我们用n位二进制序列来表示每个数字的状态，若某数字在子集中，则二进制序列对应位置位1，否则为0;<br>· 二进制序列的每一个位置有0，1两种可能，所以总共可能的情况为2^n种，对应十进制数的[0, 2^n-1];<br>· 例如集合{5，2，9}：</p>
<p><img src="/images/blogImg/lc78_ans.png" alt="举例"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> mask=<span class="hljs-number">0</span>; mask &lt; (<span class="hljs-number">1</span>&lt;&lt;n); mask++) <span class="hljs-comment">// 1&lt;&lt;n表示将1左移n位，即2的n次方(2^n)</span><br>        &#123;<br>            vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mask &amp; (<span class="hljs-number">1</span>&lt;&lt;i)) v.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            &#125;<br>            res.<span class="hljs-built_in">push_back</span>(v);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>· 时间复杂度：O(n*2^n)，一共2^n个状态，每种状态需要O(n)的时间来构造子集。</p>
<p>· 空间复杂度：O(n)，构造子集使用的临时数组v的空间代价。</p>
<h2 id="解法2：回溯法"><a href="#解法2：回溯法" class="headerlink" title="解法2：回溯法"></a>解法2：回溯法</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>· 每个位置的数字可能在子集中，也可能不在子集中，因此我们只需要对每个位置的这两种情况进行搜索就行。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; temp;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> curPosition,vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(curPosition == nums.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(temp);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//当前位置的数在子集中</span><br>        temp.<span class="hljs-built_in">push_back</span>(nums[curPosition]);<br>        <span class="hljs-built_in">dfs</span>(curPosition+<span class="hljs-number">1</span>, nums);<br>        temp.<span class="hljs-built_in">pop_back</span>();<br>        <span class="hljs-comment">//当前位置的数不在子集中</span><br>        <span class="hljs-built_in">dfs</span>(curPosition+<span class="hljs-number">1</span>, nums);<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, nums);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>· 时间复杂度：O(n*2^n)，一共2^n个状态，每种状态需要O(n)的时间来构造子集。</p>
<p>· 空间复杂度：O(n)，构造子集使用的临时数组temp的空间代价。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二进制状态编码 回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode第241场周赛</title>
    <url>/2021/05/16/leetcode%E7%AC%AC241%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="题目1："><a href="#题目1：" class="headerlink" title="题目1："></a>题目1：</h2><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210516121804630.png" alt="题目描述"></p>
<h3 id="知识点：如何求子集"><a href="#知识点：如何求子集" class="headerlink" title="知识点：如何求子集"></a>知识点：如何求子集</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">subsetXORSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = a.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> ans =<span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> msk = <span class="hljs-number">0</span>; msk &lt; ((<span class="hljs-number">1</span> &lt;&lt; n)); msk++) &#123;<br>            <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-keyword">if</span>((msk &gt;&gt; i) &amp; <span class="hljs-number">1</span>) x ^= a[i];<br>            &#125;<br>            ans += x;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode周赛</tag>
      </tags>
  </entry>
  <entry>
    <title>拷贝构造函数参数</title>
    <url>/2021/11/22/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h3 id="拷贝构造函数参数"><a href="#拷贝构造函数参数" class="headerlink" title="拷贝构造函数参数"></a>拷贝构造函数参数</h3><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul>
<li><strong>拷贝构造函数的参数必须是引用</strong></li>
</ul>
<h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul>
<li><p>为什么不能是传值？</p>
<ul>
<li>经典误区：或许你会回答为了减少一次内存拷贝？</li>
<li>正解：传值的方式会继续调用拷贝构造函数，从而造成无穷递归地调用拷贝构造函数。</li>
</ul>
</li>
<li><p>为什么不能是传指针？</p>
<ul>
<li>拷贝构造函数需要传入的是一个对象，如果拷贝构造函数的参数是指针的话，这个参数就是地址而不是对象了(仅仅指向对象而已)。 所以不能用指针，作为拷贝构造函数的参数类型。</li>
<li>即写出传指针，那就不是拷贝构造函数了，编译器不认。</li>
<li>代码验证：<ul>
<li>下面代码执行结果不会打印 ”拷贝构造函数“，说明func(a)调用的默认拷贝构造函数，即传指针的方式根本就不是拷贝构造函数。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span>   <span class="hljs-comment">// 万能头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;构造函数&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">const</span> A* a) &#123;<br>        data = a-&gt;data;<br>        cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数&quot;</span>&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(A a)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;end&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    A a;<br>    A b;<br>    a.<span class="hljs-built_in">func</span>(b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://blog.csdn.net/qq_35409955/article/details/72356370">https://blog.csdn.net/qq_35409955/article/details/72356370</a></li>
<li><a href="https://www.codenong.com/cs109023805/">https://www.codenong.com/cs109023805/</a></li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>拷贝构造函数参数</tag>
      </tags>
  </entry>
  <entry>
    <title>文件描述符</title>
    <url>/2021/11/19/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="Linux文件描述符的本质"><a href="#Linux文件描述符的本质" class="headerlink" title="Linux文件描述符的本质"></a>Linux文件描述符的本质</h3><h4 id="大致认识"><a href="#大致认识" class="headerlink" title="大致认识"></a>大致认识</h4><p><strong>文件描述符是文件编号。</strong></p>
<p>Linux 中一切皆文件，比如 C++ 源文件、视频文件、Shell脚本、可执行文件等，就连键盘、显示器、鼠标等硬件设备也都是文件。</p>
<p>一个 Linux 进程可以打开成百上千个文件，为了表示和区分已经打开的文件，Linux 会给每个文件分配一个编号（一个 ID），这个编号就是一个整数，被称为文件描述符（File Descriptor）。</p>
<h4 id="进一步认识"><a href="#进一步认识" class="headerlink" title="进一步认识"></a>进一步认识</h4><p><strong>文件描述符是PCB内部文件描述符表的下标，与文件指针一一映射。</strong></p>
<p>一个 Linux 进程启动后，会在内核空间中创建一个 PCB 控制块，PCB 内部有一个文件描述符表（File descriptor table），记录着当前进程所有可用的文件描述符，也即当前进程所有打开的文件。</p>
<p>除了文件描述符表，系统还需要维护另外两张表：</p>
<ul>
<li>打开文件表（Open file table）</li>
<li>i-node 表（i-node table）</li>
</ul>
<p><img src="/images/blogImg/fd.png" alt="三者关系"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://c.biancheng.net/view/3066.html">http://c.biancheng.net/view/3066.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux网络编程</category>
      </categories>
      <tags>
        <tag>文件描述符</tag>
      </tags>
  </entry>
  <entry>
    <title>《深度探索C++对象模型》 第一章(关于对象)</title>
    <url>/2021/11/21/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%20%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第一章-关于对象"><a href="#第一章-关于对象" class="headerlink" title="第一章    关于对象"></a>第一章    关于对象</h2><h3 id="C-对象模式（The-C-Object-Model）"><a href="#C-对象模式（The-C-Object-Model）" class="headerlink" title="C++对象模式（The C++ Object Model）"></a>C++对象模式（The C++ Object Model）</h3><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>一个class对象在机器中是如何被表示的呢？</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><p>简单对象模型（A Simple Object Model）</p>
</li>
<li><p>表格驱动对象模型（A Table-driven Object Model）</p>
</li>
<li><p>C++ 对象模型（The C++ Object Model）</p>
</li>
</ul>
<h4 id="简单对象模型（A-Simple-Object-Model）"><a href="#简单对象模型（A-Simple-Object-Model）" class="headerlink" title="简单对象模型（A Simple Object Model）"></a>简单对象模型（A Simple Object Model）</h4><blockquote>
<p>在简单模型中，一个object是一些的slots，每个slot指向一个members。Members按其声明此次序，各被指定一个slot，每一个data member或function member都有自己的一个slot。</p>
</blockquote>
<p><img src="/images/blogImg/inside_the_c++_object_model_1.png" alt="简单对象模型"></p>
<ul>
<li>简单理解起来就是，一个object被表示成了一个指针数组。</li>
<li>在这个简单模型中, members本身并不放在 object之中,只有“指向的指针”才放在 object内。这么做可以避免 ”members有不同的类型, 因而需要不同的存储空间“ 所招致的问题。</li>
<li>这个想法被应用到C++的 “指向成员的指针” 观念之中。</li>
</ul>
<h4 id="表格驱动对象模型（A-Table-driven-Object-Model）"><a href="#表格驱动对象模型（A-Table-driven-Object-Model）" class="headerlink" title="表格驱动对象模型（A Table-driven Object Model）"></a>表格驱动对象模型（A Table-driven Object Model）</h4><ul>
<li>object还是一个指针数组，不过存的是Member Data Table和Function Member Table两个表的地址。</li>
<li>这种模型保证了不同类型的对象具有相同的内存布局。</li>
<li>这个想法成为支持virtual functions的一个有效方案。</li>
</ul>
<p><img src="/images/blogImg/inside_the_c++_object_model_2.png" alt="表格驱动对象模型"></p>
<h4 id="C-对象模型（The-C-Object-Model）"><a href="#C-对象模型（The-C-Object-Model）" class="headerlink" title="C++ 对象模型（The C++ Object Model）"></a>C++ 对象模型（The C++ Object Model）</h4><ul>
<li><p>在此模型中，Nonstatic data members被配置于每一个class object之内, static data members则被存放在所有的class object之外。Static和 nonstatic function members也被放在所有的class object之外, <strong>Virtual functions则以两个步骤支持之</strong>:</p>
<ul>
<li>每一个 class产生出一堆指向 virtual functions的指针, 放在表格之中, 这个表格被称为 virtual table(vtbl)。</li>
<li>每一个 class obiect被添加了一个指针, 指向相关的 virtual table。</li>
</ul>
<p><img src="/images/blogImg/inside_the_c++_object_model_3.png" alt="C++ 对象模型"></p>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>ASOM和ATOM方法优点是object数据一致性(存的都是指针)，可以避免 ”members有不同的类型, 因而需要不同的存储空间“ 所招致的问题；缺点就是会带来间接性，使得存、取变得麻烦（特别是类继承时，如果在派生类里面存一个指向基类的指针）。</li>
<li>在C++中以类的形式实现对象之后，会增加多少布局成本？<ul>
<li>一般来说，不会增加任何成本。三个 data members 直接内含于一个 class object 中，就像 C 中的 struct 一样。而 member functions 虽然含在 class 的声明中，却不出现在 object 中 （更像是类命名空间中的普通函数）。看，类的封装居然没有带来任何额外的成本。</li>
</ul>
</li>
<li>C++在内存布局以及存取时间上的主要额外负担都是由 virtual 引起的，包括： <ul>
<li>virtual function 机制：引起了保存 vtable 和透过 vtable 找到函数地址。</li>
<li>virtual base class 机制：引起了透过指针来找到基类的成员。</li>
</ul>
</li>
<li>引入继承后的对象模型成本：<ul>
<li>如果是普通的继承，父对象被直接包含在子对象里面，这样对父对象的存取也是直接进行的， 没有额外的成本。</li>
<li>如果是虚拟继承，则父对象会由一个指针被指出来，这样的话对父对象的存取就添加了一层间接性，必须经由一个指针来访问，添加了一次间接的额外成本。</li>
</ul>
</li>
<li>一个对象的内存布局大小（通常由 3 部分组成）：<ul>
<li>其 nonstatic data member 的总和大小。</li>
<li>任何由于<a href="https://blog.csdn.net/weixin_46155255/article/details/108297804">字节对齐</a>所需要的填补上去的空间。</li>
<li>加上了为了支持 virtual 机制而引起的额外负担。</li>
<li>这也印证了前面的一个结论：C++中的额外成本通常都是由于 virtual 机制所引起的。</li>
</ul>
</li>
</ul>
<h3 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul>
<li>指针类型、cast(类型转化)只影响编译器对内存的解释(大小和内容)。</li>
</ul>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ul>
<li><strong>多态只能由指针或引用来实现</strong>，原因如下：<ul>
<li> 指针和引用（通常以指针来实现）的大小是固定的（一个 word），而对象的大小却是可变的。其类的指针和引用可以指向（或引用）子类，但是基类的对象永远也只能是基类，没有变化则不可能引发多态。</li>
<li>一个 point 或 reference 绝不会引发任何” “ 与类型有关的内存委托操作 ，在指针类型转换时 会受到的改变的只有它们所指向内存的解释方式而已。（例如指针绝不会引发 slice，因为它 们大小相同）</li>
</ul>
</li>
<li>思考(加深理解)：</li>
</ul>
<p><img src="/images/blogImg/inside_the_c++_object_model_4.png" alt="思考"></p>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>《深度探索C++对象模型》</tag>
      </tags>
  </entry>
  <entry>
    <title>状态压缩</title>
    <url>/2021/11/17/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h3 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h3><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><ul>
<li>用二进制表示状态</li>
<li>位运算</li>
</ul>
<h4 id="LC318-最大单词长度乘积"><a href="#LC318-最大单词长度乘积" class="headerlink" title="LC318.最大单词长度乘积"></a>LC318.最大单词长度乘积</h4><p><img src="/images/blogImg/lc318.png" alt="题目描述"></p>
<ul>
<li>遍历所有的单词对，判断他们是否有同样的字母出现；</li>
<li>传统的做法就是用一个长度为26的数组记录每个单词出现了哪些字符；每次比较遍历复杂度是26，乘以遍历单词对O(n^2)复杂度，可能就会超时了；</li>
<li>一个优化的方式就是采用<strong>状态压缩</strong>，我们将<strong>每一个字母是否出现在某个单词的状态用一个int表示， int的每一位代表a-z中的每个字母是否出现过;</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-comment">// 状态压缩：</span><br>        <span class="hljs-comment">// 用一个26位的int表示每个字符是否出现。(比如...101 表示&#x27;c&#x27;和&#x27;a&#x27;出现过)</span><br>        <span class="hljs-comment">// 之后再用 &amp; 运算即可知道是否有相同字符</span><br><br>        <span class="hljs-keyword">int</span> n = words.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">status</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span>&amp; ch : words[i]) &#123;<br>                status[i] |= <span class="hljs-number">1</span> &lt;&lt; (ch-<span class="hljs-string">&#x27;a&#x27;</span>);     <span class="hljs-comment">// ch相应的位置置1</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span>( (status[i] &amp; status[j]) == <span class="hljs-number">0</span>) &#123;    <span class="hljs-comment">// &amp; 为0，表示没有相同的字符</span><br>                    <span class="hljs-keyword">int</span> len = words[i].<span class="hljs-built_in">length</span>() * words[j].<span class="hljs-built_in">length</span>();<br>                    res = <span class="hljs-built_in">max</span>(res, len);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<ul>
<li>复杂度：O(L+n^2)，L是全部单词长度之和;</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>端口复用</title>
    <url>/2021/11/17/%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<h3 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul>
<li>默认的情况下，一个端口只能被一个套接字绑定；如果一个网络应用程序的一个套接字绑定了一个端口( 占用了 8000 )，这时候，别的套接字就无法使用这个端口( 8000 )；</li>
<li>因为多个应用程序占用一个端口，容易发生混乱；</li>
</ul>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>（1）服务器只对外开放某一端口（80端口或其他任意少量端口），其他端口全部被封死（2）为了躲避防火墙（3）隐藏自己后门（4）转发不出端口（5）内网渗透</li>
<li>端口复用最常用的用途应该是防止服务器重启时之前绑定的端口还未释放或者程序突然退出而系统没有释放端口。这种情况下如果设定了端口复用，则新启动的服务器进程可以直接绑定端口。如果没有设定端口复用，绑定会失败，提示ADDR已经在使用中——那只好等等再重试了，麻烦！</li>
</ul>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ul>
<li><strong>设置socket的SO_REUSEADDR选项，即可实现端口复用：</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> opt = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// sockfd为需要端口复用的套接字</span><br><span class="hljs-built_in">setsockopt</span>(sockfd, SOL_SOCKET, SO_REUSEADDR, (<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *)&amp;opt, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(opt));<br></code></pre></td></tr></table></figure>





<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul>
<li><p>端口复用允许在一个应用程序可以把 n 个套接字绑在一个端口上而不出错。同时，这 n 个套接字发送信息都正常，没有问题。但是，这些套接字并不是所有都能读取信息，只有最后一个套接字会正常接收数据。</p>
</li>
<li><p>端口复用的原理是与源端口占用程序监听同一端口，当复用端口有数据来时，我们可以判断是否是自己的数据包，如果是自己的，那么就自己处理，否则把数据包交给源端口占用程序处理。</p>
</li>
<li><p>在这里有个问题就是，如果你不处理数据包的归属问题的话，那么这个端口就会被端口复用程序占用，从而导致源端口占用程序无法工作。</p>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://blog.csdn.net/tennysonsky/article/details/44062173">https://blog.csdn.net/tennysonsky/article/details/44062173</a></li>
<li><a href="https://juejin.cn/post/6844903509624651790#heading-4">https://juejin.cn/post/6844903509624651790#heading-4</a></li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>端口复用</tag>
      </tags>
  </entry>
</search>
